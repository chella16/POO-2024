<diagram program="umletino" version="15.1"><zoom_level>10</zoom_level><element><id>UMLClass</id><coordinates><x>610</x><y>316</y><w>140</w><h>80</h></coordinates><panel_attributes>Context
--
-strategy
--
+setStrategy(strategy)
+doSomething()

</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>830</x><y>326</y><w>100</w><h>70</h></coordinates><panel_attributes>&lt;&lt;interface&gt;&gt;
Strategy
--
+execute(data)</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>740</x><y>346</y><w>80</w><h>30</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;60;10</additional_attributes></element><element><id>Relation</id><coordinates><x>790</x><y>346</y><w>60</w><h>30</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>40;10;10;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>640</x><y>466</y><w>100</w><h>30</h></coordinates><panel_attributes>Client</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>670</x><y>386</y><w>30</w><h>100</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>10;10;10;80</additional_attributes></element><element><id>UMLClass</id><coordinates><x>810</x><y>436</y><w>140</w><h>80</h></coordinates><panel_attributes>ConcreteStrategies
--

--
+execute(data)

</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>730</x><y>466</y><w>100</w><h>30</h></coordinates><panel_attributes>lt=&lt;.</panel_attributes><additional_attributes>80;10;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>870</x><y>386</y><w>30</w><h>70</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>10;10;10;50</additional_attributes></element><element><id>UMLUseCase</id><coordinates><x>600</x><y>266</y><w>40</w><h>40</h></coordinates><panel_attributes>1</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLUseCase</id><coordinates><x>920</x><y>276</y><w>40</w><h>40</h></coordinates><panel_attributes>2</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLUseCase</id><coordinates><x>960</x><y>416</y><w>40</w><h>40</h></coordinates><panel_attributes>3</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLUseCase</id><coordinates><x>750</x><y>426</y><w>40</w><h>40</h></coordinates><panel_attributes>4</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLNote</id><coordinates><x>600</x><y>546</y><w>180</w><h>60</h></coordinates><panel_attributes>str = new SomeStrategy()
context.setStrategy(str)
context.doSomething()


bg=black</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>670</x><y>486</y><w>30</w><h>80</h></coordinates><panel_attributes>lt=.</panel_attributes><additional_attributes>10;10;10;60</additional_attributes></element><element><id>UMLUseCase</id><coordinates><x>550</x><y>546</y><w>40</w><h>40</h></coordinates><panel_attributes>5</panel_attributes><additional_attributes></additional_attributes></element><element><id>Text</id><coordinates><x>1030</x><y>256</y><w>440</w><h>340</h></coordinates><panel_attributes>1. La clase Contexto mantiene una referencia a una de las estrategias concretas y se comunica con este objeto únicamente a
través de la interfaz estrategia.

2. La interfaz Estrategia es común a todas las estrategias concretas. Declara un método que la clase contexto utiliza para ejecutar una estrategia.

3. Las Estrategias Concretas implementan distintas variaciones
de un algoritmo que la clase contexto utiliza.

4. La clase contexto invoca el método de ejecución en el objeto
de estrategia vinculado cada vez que necesita ejecutar el algoritmo. La clase contexto no sabe con qué tipo de estrategia
funciona o cómo se ejecuta el algoritmo.

5. El Cliente crea un objeto de estrategia específico y lo pasa a
la clase contexto. La clase contexto expone un modificador set
que permite a los clientes sustituir la estrategia asociada al contexto durante el tiempo de ejecución.
style=wordwrap</panel_attributes><additional_attributes></additional_attributes></element><element><id>Text</id><coordinates><x>630</x><y>626</y><w>400</w><h>210</h></coordinates><panel_attributes>Usar cuando:
Muchas clases relacionadas sólo difieren en su comportamiento, strategy provee una forma de configurar
una clase com muchos comportamientos.
Necesitas diferentes variantes de un algoritmo. (pj cuando varía con el tiempo)
Un algoritmo usa información que el cliente no debería saber. Para evitar exponer estructuras de datos
complejas y específicas del algoritmo.
Una clase define muchos comportamientos y aparecen como múltiples condicionales. Si esto aparece
cambiar los múltiples if por clases que implementan cada una de las estrategias. 
style=wordwrap</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLUseCase</id><coordinates><x>710</x><y>176</y><w>120</w><h>40</h></coordinates><panel_attributes>BEHAVIORAL
bg=red</panel_attributes><additional_attributes></additional_attributes></element><element><id>Text</id><coordinates><x>280</x><y>336</y><w>240</w><h>160</h></coordinates><panel_attributes>Ejemplo: una batalla pokemón, detro de esa batalla hay efectos de estado que ocurren bajo ciertas circunstancias. Una forma de poder manejar esto, es que las circunstancias sean planteadas como una estrategia en particular, y se les asignen a una interfaz para que la misma la implemente al contexto (que seria en este caso un turno de la batalla)
style=wordwrap</panel_attributes><additional_attributes></additional_attributes></element></diagram>