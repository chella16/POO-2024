<diagram program="umletino" version="15.1"><zoom_level>10</zoom_level><help_text></help_text><element><id>UMLClass</id><coordinates><x>321</x><y>170</y><w>210</w><h>90</h></coordinates><panel_attributes>creator
--
...
--
+someOperation()
+createProduct():  Product</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>691</x><y>170</y><w>210</w><h>90</h></coordinates><panel_attributes>(interface)
product
--
+do stuff()</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>411</x><y>250</y><w>30</w><h>90</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;70</additional_attributes></element><element><id>Relation</id><coordinates><x>531</x><y>190</y><w>180</w><h>40</h></coordinates><panel_attributes>lt=&lt;.
&lt;&lt;use&gt;&gt;</panel_attributes><additional_attributes>160;20;10;20</additional_attributes></element><element><id>Relation</id><coordinates><x>351</x><y>300</y><w>90</w><h>40</h></coordinates><panel_attributes></panel_attributes><additional_attributes>10;20;70;20</additional_attributes></element><element><id>Relation</id><coordinates><x>351</x><y>310</y><w>30</w><h>100</h></coordinates><panel_attributes></panel_attributes><additional_attributes>10;10;10;80</additional_attributes></element><element><id>Relation</id><coordinates><x>471</x><y>310</y><w>30</w><h>100</h></coordinates><panel_attributes></panel_attributes><additional_attributes>10;10;10;80</additional_attributes></element><element><id>UMLClass</id><coordinates><x>471</x><y>390</y><w>160</w><h>80</h></coordinates><panel_attributes>concreteCreatorA
--
...
--
+createProduct():  Product</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>291</x><y>390</y><w>160</w><h>80</h></coordinates><panel_attributes>concreteCreatorA
--
...
--
+createProduct():  Product</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>781</x><y>250</y><w>30</w><h>90</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;.</panel_attributes><additional_attributes>10;10;10;70</additional_attributes></element><element><id>Relation</id><coordinates><x>411</x><y>300</y><w>90</w><h>40</h></coordinates><panel_attributes></panel_attributes><additional_attributes>10;20;70;20</additional_attributes></element><element><id>Relation</id><coordinates><x>721</x><y>310</y><w>90</w><h>30</h></coordinates><panel_attributes>lt=.</panel_attributes><additional_attributes>70;10;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>781</x><y>310</y><w>90</w><h>30</h></coordinates><panel_attributes>lt=.</panel_attributes><additional_attributes>70;10;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>721</x><y>310</y><w>30</w><h>90</h></coordinates><panel_attributes>lt=.</panel_attributes><additional_attributes>10;70;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>841</x><y>310</y><w>30</w><h>90</h></coordinates><panel_attributes>lt=.</panel_attributes><additional_attributes>10;70;10;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>831</x><y>380</y><w>160</w><h>30</h></coordinates><panel_attributes>concreteProductB
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>651</x><y>380</y><w>160</w><h>30</h></coordinates><panel_attributes>concreteProductA
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Text</id><coordinates><x>481</x><y>490</y><w>500</w><h>270</h></coordinates><panel_attributes>PATRÓN FACTORY:
EJEMPLO:
Dentro de un juego, deseo diseñar enemigos. Cada enemigo será una clase que deriva de una clase padre entidad que les da  sus respectivas características comunes. Ahora quiero que el jugador, no memorice donde espawnea cada enemigo, por lo que creo un algoritmo que me genere enemigos aleatorios. Todo muy lindo. Pasado un tiempo, los jugadores desean enfrentarse a enemigos de mayor dificultad, por lo que debo diseñar algún algoritmo que lo resuelva. El problema es que no todos los jugadores lo desean, sino los que llevan mas tiempo en el juego, y diseñar algo de este estilo implica cambiar cosas en mi código que me afectan a todos los enemigos, y no quiero eso.  

Acá es donde surge el patrón factory, ya que necesito encapsular la lógica de creación de enemigos para poder diseñarlos conforme el jugador lo requiera. Para esto debo crear una clase padre  que podría llamarse, por ejemplo "Enemy Factory", de esta derivan una multiplicidad de factorys en cargadas de la fabricacion de enemigos acrode a lo requerido. Por ejempo "GoombatFactory" ó "HighDificultEnemyFactory". Esto permite generalizar código y modificar implementaciones completas como y cuando se quiera.
style=wordwrap</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLUseCase</id><coordinates><x>861</x><y>120</y><w>50</w><h>40</h></coordinates><panel_attributes>1</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLUseCase</id><coordinates><x>781</x><y>330</y><w>50</w><h>40</h></coordinates><panel_attributes>2</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLUseCase</id><coordinates><x>461</x><y>120</y><w>50</w><h>40</h></coordinates><panel_attributes>3</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLUseCase</id><coordinates><x>401</x><y>330</y><w>50</w><h>40</h></coordinates><panel_attributes>4</panel_attributes><additional_attributes></additional_attributes></element><element><id>Text</id><coordinates><x>1111</x><y>100</y><w>260</w><h>70</h></coordinates><panel_attributes>1. El Producto declara la interfaz, que es común a todos los objetos que puede producir la clase creadora y sus subclases.
style=wordwrap</panel_attributes><additional_attributes></additional_attributes></element><element><id>Text</id><coordinates><x>1111</x><y>180</y><w>260</w><h>70</h></coordinates><panel_attributes>2. Los Productos Concretos son distintas implementaciones de la
interfaz de producto.

style=wordwrap</panel_attributes><additional_attributes></additional_attributes></element><element><id>Text</id><coordinates><x>1111</x><y>250</y><w>260</w><h>510</h></coordinates><panel_attributes>3. La clase Creadora declara el método fábrica que devuelve nuevos objetos de producto. Es importante que el tipo de retorno
de este método coincida con la interfaz de producto.

Puedes declarar el patrón Factory Method como abstracto para
forzar a todas las subclases a implementar sus propias versiones del método. Como alternativa, el método fábrica base
puede devolver algún tipo de producto por defecto.

Observa que, a pesar de su nombre, la creación de producto no
es la principal responsabilidad de la clase creadora. Normalmente, esta clase cuenta con alguna lógica de negocios central

relacionada con los productos. El patrón Factory Method ayuda
a desacoplar esta lógica de las clases concretas de producto.
Aquí tienes una analogía: una gran empresa de desarrollo de
software puede contar con un departamento de formación de
programadores. Sin embargo, la principal función de la empresa sigue siendo escribir código, no preparar programadores.


style=wordwrap</panel_attributes><additional_attributes></additional_attributes></element><element><id>Text</id><coordinates><x>1111</x><y>760</y><w>260</w><h>160</h></coordinates><panel_attributes>4. Los Creadores Concretos sobrescriben el Factory Method base,
de modo que devuelva un tipo diferente de producto.
Observa que el método fábrica no tiene que crear nuevas instancias todo el tiempo. También puede devolver objetos existentes de una memoria caché, una agrupación de objetos, u
otra fuente.

style=wordwrap</panel_attributes><additional_attributes></additional_attributes></element><element><id>Text</id><coordinates><x>481</x><y>800</y><w>400</w><h>100</h></coordinates><panel_attributes>Usar cuando:
Una clase no puede anticipar que clase de objetos debe ser creada.
Una clase quiere que su subclase especifique el objeto a crear.
Las clases delegan la responsabilidad a una de sus muchas subclases, y es necesario ubicar cuál de todas
esas subclases es la que puede dar respuesta a la necesidad actual.
style=wordwrap</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLUseCase</id><coordinates><x>331</x><y>0</y><w>150</w><h>50</h></coordinates><panel_attributes>lt=.
CREACIONAL
fg=red
bg=yellow</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLNote</id><coordinates><x>61</x><y>120</y><w>180</w><h>70</h></coordinates><panel_attributes>product p=createProduct()
p.doStuff()

bg=black</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>141</x><y>180</y><w>200</w><h>70</h></coordinates><panel_attributes>lt=.</panel_attributes><additional_attributes>10;10;10;50;180;50</additional_attributes></element></diagram>