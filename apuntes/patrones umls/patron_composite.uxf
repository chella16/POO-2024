<diagram program="umletino" version="15.1"><zoom_level>10</zoom_level><element><id>UMLClass</id><coordinates><x>580</x><y>290</y><w>80</w><h>30</h></coordinates><panel_attributes>Cliente
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>610</x><y>310</y><w>30</w><h>70</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>10;50;10;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>570</x><y>360</y><w>100</w><h>70</h></coordinates><panel_attributes>&lt;&lt;Interface&gt;&gt;
Component
--
+execute()
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>640</x><y>520</y><w>210</w><h>120</h></coordinates><panel_attributes>Composite
--
-children: Component[]
--
+add(c: Component)
+remove(c: Component)
+get_children():Component[]
+execute()
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>510</x><y>500</y><w>80</w><h>70</h></coordinates><panel_attributes>Leaf
--
...
--
+execute()
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>740</x><y>390</y><w>30</w><h>150</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;130;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>660</x><y>390</y><w>110</w><h>30</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>10;10;90;10</additional_attributes></element><element><id>Relation</id><coordinates><x>610</x><y>420</y><w>30</w><h>70</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>10;10;10;50</additional_attributes></element><element><id>Relation</id><coordinates><x>550</x><y>460</y><w>90</w><h>60</h></coordinates><panel_attributes>lt=.</panel_attributes><additional_attributes>70;10;10;10;10;40</additional_attributes></element><element><id>Relation</id><coordinates><x>610</x><y>460</y><w>80</w><h>80</h></coordinates><panel_attributes>lt=.</panel_attributes><additional_attributes>60;60;60;10;10;10</additional_attributes></element><element><id>UMLUseCase</id><coordinates><x>510</x><y>350</y><w>50</w><h>40</h></coordinates><panel_attributes>1</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLUseCase</id><coordinates><x>450</x><y>480</y><w>50</w><h>40</h></coordinates><panel_attributes>2</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLUseCase</id><coordinates><x>820</x><y>470</y><w>50</w><h>40</h></coordinates><panel_attributes>3</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLUseCase</id><coordinates><x>650</x><y>250</y><w>50</w><h>40</h></coordinates><panel_attributes>4</panel_attributes><additional_attributes></additional_attributes></element><element><id>Text</id><coordinates><x>880</x><y>220</y><w>330</w><h>450</h></coordinates><panel_attributes>1. La interfaz Componente describe operaciones que son comunes a elementos simples y complejos del árbol.
2. La Hoja es un elemento básico de un árbol que no tiene
subelementos.
Normalmente, los componentes de la hoja acaban realizando
la mayoría del trabajo real, ya que no tienen a nadie a quien
delegarle el trabajo.
3. El Contenedor (también llamado compuesto) es un elemento
que tiene subelementos: hojas u otros contenedores. Un contenedor no conoce las clases concretas de sus hijos. Funciona
con todos los subelementos únicamente a través de la interfaz
componente.
Al recibir una solicitud, un contenedor delega el trabajo a sus
subelementos, procesa los resultados intermedios y devuelve
el resultado final al cliente.
4. El Cliente funciona con todos los elementos a través de la interfaz componente. Como resultado, el cliente puede funcionar
de la misma manera tanto con elementos simples como complejos del árbol.
style=wordwrap</panel_attributes><additional_attributes></additional_attributes></element><element><id>Text</id><coordinates><x>230</x><y>670</y><w>580</w><h>120</h></coordinates><panel_attributes>Ejemplo: En un videojuego, cada entidad posee una función de renderizado, quiero diseñar un enemigo muy grande, un Boss. Este Boss está conformado de varias partes, por ejemplo, sus extremidades, y cada extremidad tiene una lógica diferente. El problema es que cada vez que renderizo al enemigo, debo hacer que cada extremidad se renderice por separado, y es un dolor de maso. Para solucionar esto,  se realiza una estructura de arbol (composite) en la cual se delega (para este caso) cada extremidad, a una clase padre encargada de aplicar la renderización a los hijos.
Esto también premite aplicar condiciones sobre los hijos en algún punto requerido sin afectar a la totalidad de la estructura
style=wordwrap</panel_attributes><additional_attributes></additional_attributes></element><element><id>Text</id><coordinates><x>880</x><y>710</y><w>510</w><h>70</h></coordinates><panel_attributes>Usar cuando se quiere representar parte o toda una jerarquía de objetos.
Se quiere que los clientes puedan ignorar las diferencias entre la composición de objetos o de los objetos
individuales. El cliente va a tratar a todos los objetos como una estructura compuesta uniforme. 
style=wordwrap</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLUseCase</id><coordinates><x>290</x><y>150</y><w>140</w><h>50</h></coordinates><panel_attributes>ESTRUCTURAL
bg=blue</panel_attributes><additional_attributes></additional_attributes></element></diagram>